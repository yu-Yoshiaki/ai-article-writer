---
description: 
globs: 
alwaysApply: false
---
# SWR使用ルール

Next.jsプロジェクトでのデータフェッチには[SWR](mdc:https:/swr.vercel.app/ja)の使用を推奨します。SWRはVercel製のReactフックライブラリで、データフェッチの効率化、キャッシュ管理、再検証機能などを提供します。

## SWRを使用すべき場面

以下の場合はSWRの使用を検討してください：

1. **APIエンドポイントからのデータ取得**
   - 特にコンポーネント内で直接`fetch()`や`useEffect`+`fetch`を使用している場合は、SWRに置き換えるべきです

2. **複数コンポーネントで同じデータを共有する場合**
   - SWRはグローバルキャッシュを持つため、同じキーでのリクエストは一度だけ実行されます

3. **データの自動再検証が必要な場合**
   - フォーカス時、再接続時、定期的な更新などが必要な場合

4. **楽観的UIアップデートが必要な場合**
   - `mutate`関数を使用して即座にUIを更新しつつ、バックグラウンドで再検証できます

## 基本的な使用方法

```typescript
import useSWR from 'swr';

// フェッチャー関数
const fetcher = (url: string) => fetch(url).then(res => {
  if (!res.ok) throw new Error('エラーが発生しました');
  return res.json();
});

// コンポーネント内
function MyComponent() {
  const { data, error, isLoading } = useSWR('/api/data', fetcher);
  
  if (isLoading) return <div>読み込み中...</div>;
  if (error) return <div>エラーが発生しました: {error.message}</div>;
  
  return <div>{data.name}</div>;
}
```

## ローカルストレージとの使い分け

- **APIベースのデータ**: SWRを使用
- **ユーザー設定や一時データ**: ローカルストレージを使用
- **オフライン対応が必要な場合**: SWRの`localStorage`プロバイダーを検討

## SWRの導入手順

1. パッケージのインストール
   ```bash
   pnpm add swr
   ```

2. `fetch`呼び出しをSWRに置き換える
   - `useEffect`内のfetch呼び出しは`useSWR`に変更
   - 状態管理のための`useState`も不要になる場合が多い

3. 必要に応じてSWRConfigでグローバル設定
   ```jsx
   <SWRConfig value={{ fetcher, revalidateOnFocus: false }}>
     <App />
   </SWRConfig>
   ```

## 参考資料
- [SWR公式ドキュメント](mdc:https:/swr.vercel.app/ja)
- [Next.js + SWRでのデータフェッチ](mdc:https:/nextjs.org/docs/pages/building-your-application/data-fetching/client-side)
